[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_sprintf
	EXTERN	_io_hlt
	EXTERN	_hankaku
	EXTERN	_io_load_eflags
	EXTERN	_io_cli
	EXTERN	_io_out8
	EXTERN	_io_store_eflags
[FILE "bootpack.c"]
[SECTION .data]
LC0:
	DB	"(x, y) = (%d, %d)",0x00
[SECTION .text]
	ALIGN	2
	GLOBAL	_HariMain
_HariMain:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,344
	MOV	DWORD [-12+EBP],4080
	CALL	_init_palette
	SUB	ESP,4
	MOV	EAX,DWORD [-12+EBP]
	MOVSX	EAX,WORD [6+EAX]
	PUSH	EAX
	MOV	EAX,DWORD [-12+EBP]
	MOVSX	EAX,WORD [4+EAX]
	PUSH	EAX
	MOV	EAX,DWORD [-12+EBP]
	PUSH	DWORD [8+EAX]
	CALL	_init_screen8
	ADD	ESP,16
	MOV	EAX,DWORD [-12+EBP]
	MOVSX	EAX,WORD [4+EAX]
	LEA	EDX,DWORD [-16+EAX]
	MOV	EAX,EDX
	SAR	EAX,31
	SHR	EAX,31
	LEA	EAX,DWORD [EAX+EDX*1]
	SAR	EAX,1
	MOV	DWORD [-332+EBP],EAX
	MOV	EAX,DWORD [-12+EBP]
	MOVSX	EAX,WORD [6+EAX]
	LEA	EDX,DWORD [-44+EAX]
	MOV	EAX,EDX
	SAR	EAX,31
	SHR	EAX,31
	LEA	EAX,DWORD [EAX+EDX*1]
	SAR	EAX,1
	MOV	DWORD [-336+EBP],EAX
	SUB	ESP,8
	PUSH	14
	LEA	EAX,DWORD [-328+EBP]
	PUSH	EAX
	CALL	_init_mouse_cursor8
	ADD	ESP,16
	PUSH	16
	LEA	EAX,DWORD [-328+EBP]
	PUSH	EAX
	PUSH	DWORD [-336+EBP]
	PUSH	DWORD [-332+EBP]
	PUSH	16
	PUSH	16
	MOV	EAX,DWORD [-12+EBP]
	MOVSX	EAX,WORD [4+EAX]
	PUSH	EAX
	MOV	EAX,DWORD [-12+EBP]
	PUSH	DWORD [8+EAX]
	CALL	_putblock8_8
	ADD	ESP,32
	PUSH	DWORD [-336+EBP]
	PUSH	DWORD [-332+EBP]
	PUSH	LC0
	LEA	EAX,DWORD [-72+EBP]
	PUSH	EAX
	CALL	_sprintf
	ADD	ESP,16
	SUB	ESP,8
	LEA	EAX,DWORD [-72+EBP]
	PUSH	EAX
	PUSH	7
	PUSH	0
	PUSH	0
	MOV	EAX,DWORD [-12+EBP]
	MOVSX	EAX,WORD [4+EAX]
	PUSH	EAX
	MOV	EAX,DWORD [-12+EBP]
	PUSH	DWORD [8+EAX]
	CALL	_putfont8_asc
	ADD	ESP,32
L2:
	CALL	_io_hlt
	JMP	L2
[SECTION .data]
_cursor.0:
	DB	"**************.."
	DB	"*OOOOOOOOOOO*..."
	DB	"*OOOOOOOOOO*...."
	DB	"*OOOOOOOOO*....."
	DB	"*OOOOOOOO*......"
	DB	"*OOOOOOO*......."
	DB	"*OOOOOOO*......."
	DB	"*OOOOOOOO*......"
	DB	"*OOOO**OOO*....."
	DB	"*OOO*..*OOO*...."
	DB	"*OO*....*OOO*..."
	DB	"*O*......*OOO*.."
	DB	"**........*OOO*."
	DB	"*..........*OOO*"
	DB	"............*OO*"
	DB	".............***"
[SECTION .text]
	ALIGN	2
	GLOBAL	_init_mouse_cursor8
_init_mouse_cursor8:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,12
	MOV	EAX,DWORD [12+EBP]
	MOV	BYTE [-1+EBP],AL
	MOV	DWORD [-12+EBP],0
L6:
	CMP	DWORD [-12+EBP],15
	JLE	L9
	JMP	L5
L9:
	MOV	DWORD [-8+EBP],0
L10:
	CMP	DWORD [-8+EBP],15
	JLE	L13
	JMP	L8
L13:
	MOV	EAX,DWORD [-12+EBP]
	SAL	EAX,4
	ADD	EAX,DWORD [-8+EBP]
	ADD	EAX,_cursor.0
	CMP	BYTE [EAX],42
	JNE	L14
	MOV	EAX,DWORD [-12+EBP]
	SAL	EAX,4
	ADD	EAX,DWORD [-8+EBP]
	ADD	EAX,DWORD [8+EBP]
	MOV	BYTE [EAX],0
L14:
	MOV	EAX,DWORD [-12+EBP]
	SAL	EAX,4
	ADD	EAX,DWORD [-8+EBP]
	ADD	EAX,_cursor.0
	CMP	BYTE [EAX],79
	JNE	L15
	MOV	EAX,DWORD [-12+EBP]
	SAL	EAX,4
	ADD	EAX,DWORD [-8+EBP]
	ADD	EAX,DWORD [8+EBP]
	MOV	BYTE [EAX],7
L15:
	MOV	EAX,DWORD [-12+EBP]
	SAL	EAX,4
	ADD	EAX,DWORD [-8+EBP]
	ADD	EAX,_cursor.0
	CMP	BYTE [EAX],46
	JNE	L12
	MOV	EAX,DWORD [-12+EBP]
	SAL	EAX,4
	ADD	EAX,DWORD [-8+EBP]
	MOV	EDX,EAX
	ADD	EDX,DWORD [8+EBP]
	MOV	AL,BYTE [-1+EBP]
	MOV	BYTE [EDX],AL
L12:
	LEA	EAX,DWORD [-8+EBP]
	INC	DWORD [EAX]
	JMP	L10
L8:
	LEA	EAX,DWORD [-12+EBP]
	INC	DWORD [EAX]
	JMP	L6
L5:
	LEAVE
	RET
	ALIGN	2
	GLOBAL	_putblock8_8
_putblock8_8:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,8
	MOV	DWORD [-8+EBP],0
L18:
	MOV	EAX,DWORD [-8+EBP]
	CMP	EAX,DWORD [20+EBP]
	JL	L21
	JMP	L17
L21:
	MOV	DWORD [-4+EBP],0
L22:
	MOV	EAX,DWORD [-4+EBP]
	CMP	EAX,DWORD [16+EBP]
	JL	L25
	JMP	L20
L25:
	MOV	EAX,DWORD [-8+EBP]
	ADD	EAX,DWORD [28+EBP]
	MOV	EDX,EAX
	IMUL	EDX,DWORD [12+EBP]
	MOV	EAX,DWORD [-4+EBP]
	ADD	EAX,DWORD [24+EBP]
	LEA	EAX,DWORD [EAX+EDX*1]
	MOV	EDX,EAX
	ADD	EDX,DWORD [8+EBP]
	MOV	EAX,DWORD [-8+EBP]
	IMUL	EAX,DWORD [36+EBP]
	ADD	EAX,DWORD [-4+EBP]
	ADD	EAX,DWORD [32+EBP]
	MOV	AL,BYTE [EAX]
	MOV	BYTE [EDX],AL
	LEA	EAX,DWORD [-4+EBP]
	INC	DWORD [EAX]
	JMP	L22
L20:
	LEA	EAX,DWORD [-8+EBP]
	INC	DWORD [EAX]
	JMP	L18
L17:
	LEAVE
	RET
	ALIGN	2
	GLOBAL	_putfont8_asc
_putfont8_asc:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,8
	MOV	EAX,DWORD [24+EBP]
	MOV	BYTE [-1+EBP],AL
L27:
	MOV	EAX,DWORD [28+EBP]
	CMP	BYTE [EAX],0
	JNE	L30
	JMP	L26
L30:
	SUB	ESP,8
	MOV	EAX,DWORD [28+EBP]
	MOV	AL,BYTE [EAX]
	AND	EAX,255
	SAL	EAX,4
	ADD	EAX,_hankaku
	PUSH	EAX
	MOVSX	EAX,BYTE [-1+EBP]
	PUSH	EAX
	PUSH	DWORD [20+EBP]
	PUSH	DWORD [16+EBP]
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_putfont8
	ADD	ESP,32
	LEA	EAX,DWORD [16+EBP]
	ADD	DWORD [EAX],8
	LEA	EAX,DWORD [28+EBP]
	INC	DWORD [EAX]
	JMP	L27
L26:
	LEAVE
	RET
	ALIGN	2
	GLOBAL	_putfont8
_putfont8:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,16
	MOV	EAX,DWORD [24+EBP]
	MOV	BYTE [-1+EBP],AL
	MOV	DWORD [-8+EBP],0
L32:
	CMP	DWORD [-8+EBP],15
	JLE	L35
	JMP	L31
L35:
	MOV	EAX,DWORD [-8+EBP]
	ADD	EAX,DWORD [28+EBP]
	MOV	AL,BYTE [EAX]
	MOV	BYTE [-13+EBP],AL
	MOV	EAX,DWORD [-8+EBP]
	ADD	EAX,DWORD [20+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [8+EBP]
	ADD	EAX,DWORD [16+EBP]
	MOV	DWORD [-12+EBP],EAX
	MOV	AL,-128
	AND	AL,BYTE [-13+EBP]
	TEST	AL,AL
	JE	L36
	MOV	EDX,DWORD [-12+EBP]
	MOV	AL,BYTE [-1+EBP]
	MOV	BYTE [EDX],AL
L36:
	MOV	AL,BYTE [-13+EBP]
	AND	EAX,64
	TEST	AL,AL
	JE	L37
	MOV	EDX,DWORD [-12+EBP]
	INC	EDX
	MOV	AL,BYTE [-1+EBP]
	MOV	BYTE [EDX],AL
L37:
	MOV	AL,BYTE [-13+EBP]
	AND	EAX,32
	TEST	AL,AL
	JE	L38
	MOV	EDX,DWORD [-12+EBP]
	ADD	EDX,2
	MOV	AL,BYTE [-1+EBP]
	MOV	BYTE [EDX],AL
L38:
	MOV	AL,BYTE [-13+EBP]
	AND	EAX,16
	TEST	AL,AL
	JE	L39
	MOV	EDX,DWORD [-12+EBP]
	ADD	EDX,3
	MOV	AL,BYTE [-1+EBP]
	MOV	BYTE [EDX],AL
L39:
	MOV	AL,BYTE [-13+EBP]
	AND	EAX,8
	TEST	AL,AL
	JE	L40
	MOV	EDX,DWORD [-12+EBP]
	ADD	EDX,4
	MOV	AL,BYTE [-1+EBP]
	MOV	BYTE [EDX],AL
L40:
	MOV	AL,BYTE [-13+EBP]
	AND	EAX,4
	TEST	AL,AL
	JE	L41
	MOV	EDX,DWORD [-12+EBP]
	ADD	EDX,5
	MOV	AL,BYTE [-1+EBP]
	MOV	BYTE [EDX],AL
L41:
	MOV	AL,BYTE [-13+EBP]
	AND	EAX,2
	TEST	AL,AL
	JE	L42
	MOV	EDX,DWORD [-12+EBP]
	ADD	EDX,6
	MOV	AL,BYTE [-1+EBP]
	MOV	BYTE [EDX],AL
L42:
	MOV	AL,BYTE [-13+EBP]
	AND	EAX,1
	TEST	AL,AL
	JE	L34
	MOV	EDX,DWORD [-12+EBP]
	ADD	EDX,7
	MOV	AL,BYTE [-1+EBP]
	MOV	BYTE [EDX],AL
L34:
	LEA	EAX,DWORD [-8+EBP]
	INC	DWORD [EAX]
	JMP	L32
L31:
	LEAVE
	RET
	ALIGN	2
	GLOBAL	_init_screen8
_init_screen8:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,8
	SUB	ESP,4
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,29
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	DEC	EAX
	PUSH	EAX
	PUSH	0
	PUSH	0
	PUSH	14
	PUSH	320
	PUSH	DWORD [8+EBP]
	CALL	_backfill8
	ADD	ESP,32
	SUB	ESP,4
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,28
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	DEC	EAX
	PUSH	EAX
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,28
	PUSH	EAX
	PUSH	0
	PUSH	8
	PUSH	320
	PUSH	DWORD [8+EBP]
	CALL	_backfill8
	ADD	ESP,32
	SUB	ESP,4
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,27
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	DEC	EAX
	PUSH	EAX
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,27
	PUSH	EAX
	PUSH	0
	PUSH	7
	PUSH	320
	PUSH	DWORD [8+EBP]
	CALL	_backfill8
	ADD	ESP,32
	SUB	ESP,4
	MOV	EAX,DWORD [16+EBP]
	DEC	EAX
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	DEC	EAX
	PUSH	EAX
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,26
	PUSH	EAX
	PUSH	0
	PUSH	8
	PUSH	320
	PUSH	DWORD [8+EBP]
	CALL	_backfill8
	ADD	ESP,32
	SUB	ESP,4
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,24
	PUSH	EAX
	PUSH	59
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,24
	PUSH	EAX
	PUSH	3
	PUSH	7
	PUSH	320
	PUSH	DWORD [8+EBP]
	CALL	_backfill8
	ADD	ESP,32
	SUB	ESP,4
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,4
	PUSH	EAX
	PUSH	2
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,24
	PUSH	EAX
	PUSH	2
	PUSH	7
	PUSH	320
	PUSH	DWORD [8+EBP]
	CALL	_backfill8
	ADD	ESP,32
	SUB	ESP,4
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,4
	PUSH	EAX
	PUSH	59
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,4
	PUSH	EAX
	PUSH	3
	PUSH	15
	PUSH	320
	PUSH	DWORD [8+EBP]
	CALL	_backfill8
	ADD	ESP,32
	SUB	ESP,4
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,5
	PUSH	EAX
	PUSH	59
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,23
	PUSH	EAX
	PUSH	59
	PUSH	15
	PUSH	320
	PUSH	DWORD [8+EBP]
	CALL	_backfill8
	ADD	ESP,32
	SUB	ESP,4
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,3
	PUSH	EAX
	PUSH	59
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,3
	PUSH	EAX
	PUSH	2
	PUSH	0
	PUSH	320
	PUSH	DWORD [8+EBP]
	CALL	_backfill8
	ADD	ESP,32
	SUB	ESP,4
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,3
	PUSH	EAX
	PUSH	60
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,24
	PUSH	EAX
	PUSH	60
	PUSH	0
	PUSH	320
	PUSH	DWORD [8+EBP]
	CALL	_backfill8
	ADD	ESP,32
	SUB	ESP,4
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,24
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	SUB	EAX,4
	PUSH	EAX
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,24
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	SUB	EAX,47
	PUSH	EAX
	PUSH	15
	PUSH	320
	PUSH	DWORD [8+EBP]
	CALL	_backfill8
	ADD	ESP,32
	SUB	ESP,4
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,4
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	SUB	EAX,47
	PUSH	EAX
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,23
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	SUB	EAX,47
	PUSH	EAX
	PUSH	15
	PUSH	320
	PUSH	DWORD [8+EBP]
	CALL	_backfill8
	ADD	ESP,32
	SUB	ESP,4
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,3
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	SUB	EAX,4
	PUSH	EAX
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,3
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	SUB	EAX,47
	PUSH	EAX
	PUSH	7
	PUSH	320
	PUSH	DWORD [8+EBP]
	CALL	_backfill8
	ADD	ESP,32
	SUB	ESP,4
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,3
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	SUB	EAX,3
	PUSH	EAX
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,24
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	SUB	EAX,3
	PUSH	EAX
	PUSH	7
	PUSH	320
	PUSH	DWORD [8+EBP]
	CALL	_backfill8
	ADD	ESP,32
	LEAVE
	RET
	ALIGN	2
	GLOBAL	_backfill8
_backfill8:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,12
	MOV	EAX,DWORD [16+EBP]
	MOV	BYTE [-1+EBP],AL
	MOV	EAX,DWORD [24+EBP]
	MOV	DWORD [-12+EBP],EAX
L46:
	MOV	EAX,DWORD [-12+EBP]
	CMP	EAX,DWORD [32+EBP]
	JLE	L49
	JMP	L45
L49:
	MOV	EAX,DWORD [20+EBP]
	MOV	DWORD [-8+EBP],EAX
L50:
	MOV	EAX,DWORD [-8+EBP]
	CMP	EAX,DWORD [28+EBP]
	JLE	L53
	JMP	L48
L53:
	MOV	EAX,DWORD [-12+EBP]
	IMUL	EAX,DWORD [12+EBP]
	ADD	EAX,DWORD [-8+EBP]
	MOV	EDX,EAX
	ADD	EDX,DWORD [8+EBP]
	MOV	AL,BYTE [-1+EBP]
	MOV	BYTE [EDX],AL
	LEA	EAX,DWORD [-8+EBP]
	INC	DWORD [EAX]
	JMP	L50
L48:
	LEA	EAX,DWORD [-12+EBP]
	INC	DWORD [EAX]
	JMP	L46
L45:
	LEAVE
	RET
[SECTION .data]
_table_rgb.1:
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	0
	DB	-1
	DB	-1
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	-1
	DB	0
	DB	-1
	DB	0
	DB	-1
	DB	-1
	DB	-1
	DB	-1
	DB	-1
	DB	-58
	DB	-58
	DB	-58
	DB	-124
	DB	0
	DB	0
	DB	0
	DB	-124
	DB	0
	DB	-124
	DB	-124
	DB	0
	DB	0
	DB	0
	DB	-124
	DB	-124
	DB	0
	DB	-124
	DB	0
	DB	-124
	DB	-124
	DB	-124
	DB	-124
	DB	-124
[SECTION .text]
	ALIGN	2
	GLOBAL	_init_palette
_init_palette:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,8
	SUB	ESP,4
	PUSH	_table_rgb.1
	PUSH	15
	PUSH	0
	CALL	_set_palette
	ADD	ESP,16
	LEAVE
	RET
	ALIGN	2
	GLOBAL	_set_palette
_set_palette:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,8
	CALL	_io_load_eflags
	MOV	DWORD [-8+EBP],EAX
	CALL	_io_cli
	SUB	ESP,8
	PUSH	DWORD [8+EBP]
	PUSH	968
	CALL	_io_out8
	ADD	ESP,16
	MOV	EAX,DWORD [8+EBP]
	MOV	DWORD [-4+EBP],EAX
L56:
	MOV	EAX,DWORD [-4+EBP]
	CMP	EAX,DWORD [12+EBP]
	JLE	L59
	JMP	L57
L59:
	SUB	ESP,8
	MOV	EAX,DWORD [16+EBP]
	MOV	AL,BYTE [EAX]
	SHR	AL,2
	AND	EAX,255
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	ADD	ESP,16
	SUB	ESP,8
	MOV	EAX,DWORD [16+EBP]
	INC	EAX
	MOV	AL,BYTE [EAX]
	SHR	AL,2
	AND	EAX,255
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	ADD	ESP,16
	SUB	ESP,8
	MOV	EAX,DWORD [16+EBP]
	ADD	EAX,2
	MOV	AL,BYTE [EAX]
	SHR	AL,2
	AND	EAX,255
	PUSH	EAX
	PUSH	969
	CALL	_io_out8
	ADD	ESP,16
	LEA	EAX,DWORD [16+EBP]
	ADD	DWORD [EAX],3
	LEA	EAX,DWORD [-4+EBP]
	INC	DWORD [EAX]
	JMP	L56
L57:
	SUB	ESP,12
	PUSH	DWORD [-8+EBP]
	CALL	_io_store_eflags
	ADD	ESP,16
	LEAVE
	RET
